// majeur partie des cas
Image : nom_utilisateur/nom_version_image:tags

//repository officiel
nginx:tags
alpine:tags (sur le site hub.docker, numero des version disponible)

hub.docker.com (le site de depot des images docker)
Dockerfile (fichier texte qui permet de creer une image)

pour installer une petite image

Astuce pour rajouter docker dans sudo a voir dans la video

cmd : docker images

docker pull alpine:latest (ou nom de version)
docker images (on voit alpine)
docker rmi alpine:3.12 (remove l'image en cours)

docker run (a partir d'une image, lance un container)
docker run alpine:(version) ping google.fr (lance un container avec l'image alpine et fait un ping sur google.fr)
docker ps (voir un container tourner actif)
docker ps -a (montre tous les containers meme les arreter)

docker rm (supprime un container)
docker run -d alpine:(version) ping google.fr (daemon, tourne en arriere plan)
docker ps (le container tourne encore)
docker stats (voit l'utilisation cpu en direct des containers)


docker run --name [nom_container] (donne un nom au container)
docker stop [nom_container]
docker start [nom_container]

docker logs [nom_container]
docker logs -f [nom_container] (afficher sur mon terminal le terminal du container)

docker run -d (daemon) --rm (des que le container s'arrete il se supprime) alpine [nom_container] google.fr
docker run -it (attache un terminal)

docker exec [nom_container] [cmd] (execute une commande dans un container (a l'interieur du container))
docker exec -it [nom_container] sh (je suis dans le terminal)
{
	apk upgrade -U
	apk add curl (on a ajoute des elements dans notre container)
	curl -X GET http://google.fr
}
docker exec -it ping curl -X GET http://google.fr (la cmd fonctionne dans le container meme en dehors du terminal suite a la maj)
docker stop [nom_container]

docker run -v  [path_machine_host]:[path_info_container] (chemin absolue) (permet de partager un fichier ou dossier via le container)
docker run -it -d --rm --name [nom_container] -v /home/cfontain/Desktop/[nom_ficher]:/var/cache/apk/ alpine ping google.fr
docker run -it [nom_container] apk upgrade -U (met a jour apk mais dans le fichier partage)


# CREER UNE IMAGE AVEC DOCKERFILE

commande dockerfile en majuscule, une cmd par ligne

FROM alpine:3.5
CMD ["ping", "google.fr"] nom de commande entre crochet, arguments commandes separe entre crochet
CMD [] (on peut en rajouter comme ca, ca fera des steps supplementaires)

(a chaque lancement du container, la cmd au dessus sera lance)

docker build -t pj/[nom_container]:[tag(optionnel)].

bail de script et de variable d'environnement

#!/bin/sh
ping $SCRIPT_URL -c $SCRIPT_COUNT


WORKDIR /toto  (equivalent d'un cd)
COPY ./script.sh /toto/script.sh   [chemin_container]
CMD ["./script.sh"]

docker run -e SCRIPT_URL="google.fr" -e SCRIPT_COUNT=4 (permet de specifier les variables d'env)

######################

FROM alpine
RUN  apk upgrade -U (lance cette execution pendant la construction du container)
RUN apk add curl
WORKDIR /script
COPY ./script.sh .
CMD ["curl", "X", "GET", "google.fr"] (quand la cmd est finit le container s'arrete)

#####################

on peut lancer docker build -t cfontain/[nom_container]:[tag]

#####################

#!/bin/sh
curl -X GET #URL

A chaque RUN ou CMD on multiplie les couches.

donc il vaut mieux faire des pipes et tout sur les RUN
RUN apk upgrade -U && apk add curl && rn -rf /var/cache/apk/*
COPY ./script.sh /scripts/script.sh
CMD "./scripts/script.sh

Le fait de reduire les etapes permet d'optimiser et de reduire le temps d'exec du container.

# DOCKER : heberger un site avec NGINX

FROM nginx:alpine
COPY ./www/archi/ /var/www/
COPY ./archi.conf /etc/nginx/conf.d/.

fichier nom : archi.conf (dans dossier nginx)
server {
	listen 80;
	server_name archi.com www.archi.com;
	location / {
		root /var/www/;
		try_files $uri $uri/ = 404;
	}
}

docker run -d -it --rm --name ngins cfontain/nginx:1

! Les container sont isole du reseaux. 

docker run -it -d --rm --name ngins cfontain/nginx:1 -p 80:80 (ecoute ce port et met le sur ce service distant)

ensuite faire archi.com dans chrome (reset le cache si ca marche pas)

#####

docker run -it -d -p 80:80 --rm --name nginx -v $(pwd)/conf.d:/etc/nginx/conf.d:ro -v $(pwd)/www/:/var/www/:ro nginx:alpine 

docker exec -it nginx sh
cd /etc/nginx/conf.d et ls, le fichier conf a ete copie ici



#### reste 10 min a regarder

creer un fichier default.conf

server {
	listen 80 default_server;
	server_name_;
	return 444;
}

tips a la fin pour rajouter une copie des logs access log et error log
